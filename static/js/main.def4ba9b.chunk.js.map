{"version":3,"sources":["firebase.js","TODO.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","marginLeft","marginTop","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","TODO","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","aria-labelledby","aria-describedby","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","Container","maxWidth","Typography","component","style","height","borderRadius","color","fontWeight","fontSize","overflow","variant","marginRight","float","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.def4ba9b.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyA-kQ4PtzJBreEGb0rWcZUaEP2IQo9Pxtw\",\r\n  authDomain: \"todo-app-7ff54.firebaseapp.com\",\r\n  databaseURL: \"https://todo-app-7ff54.firebaseio.com\",\r\n  projectId: \"todo-app-7ff54\",\r\n  storageBucket: \"todo-app-7ff54.appspot.com\",\r\n  messagingSenderId: \"996969935524\",\r\n  appId: \"1:996969935524:web:c02e7ef78fc55999e8ec31\",\r\n  measurementId: \"G-90BFEHM2NF\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n\r\n","import { Button, List , ListItem, Modal } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport db from './firebase';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\n \r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 900,\r\n      marginLeft: 230 ,\r\n      marginTop: 100,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nfunction TODO(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [input, setInput] = useState('');\r\n\r\n    // const handleOpen = () => {\r\n    //     setOpen(true)\r\n    // }\r\n\r\n    // const handleClose = () => {\r\n    //     setOpen(false)\r\n    // }\r\n\r\n        const updateTodo = () => {\r\n            // update with new i/p txt\r\n\r\n            db.collection('todos').doc(props.todo.id).set({\r\n                todo: input\r\n            },{ merge: true });\r\n\r\n            setInput('');\r\n            setOpen(false);\r\n        }\r\n\r\n    return (\r\n        <>\r\n\r\n        <Modal\r\n        open={open}\r\n        onClose={e => setOpen(false) }\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        >\r\n            <div className={classes.paper} >\r\n                <h1>Update Your Todo</h1>\r\n                <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)} />\r\n                <Button onClick={updateTodo} >Update Todo</Button>\r\n\r\n            </div>\r\n        </Modal>\r\n\r\n\r\n        <List className=\"todo__list\" >\r\n        <ListItem>\r\n        {/* <ListItemAvatar>\r\n            <Avatar style={{backgroundColor:\"red\"}} >\r\n                A\r\n            </Avatar>\r\n        </ListItemAvatar> */}\r\n                <Container maxWidth=\"xl\"   >\r\n                <Typography\r\n                component=\"div\"\r\n                style={{ backgroundColor: \"black\", height: \"15vh\" , border:'2px solid black' , borderRadius:'8px' }}\r\n                >\r\n                <p style={{color:'yellow' , fontWeight:'680' , fontSize:'110%' , marginLeft:'14px' , width:'96%' , height:'500%' , overflow:'auto'  }} >{props.todo.todo}</p>\r\n                {/* <ListItemText primary={props.todo.todo} style={{textAlign:\"center\" , color:\"#F4A817\" , fontSize:\"30\" }} /> */}\r\n                </Typography>\r\n                <Button  variant=\"contained\" color=\"primary\" onClick={e => setOpen(true)} style={{ marginTop:'-50px' , marginRight:'80px' , float:'right'  }} >Edit Me </Button>\r\n                 <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete() }   style={{marginTop:'-45px' , marginRight:'30px' , float:'right' , color:'white' }} />\r\n            </Container>\r\n            \r\n        </ListItem>\r\n\r\n        \r\n\r\n            \r\n        </List>\r\n\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default TODO\r\n","import React, { useEffect, useState } from 'react';\nimport Todo from './TODO';\nimport { Button , FormControl , Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n\n\n\n    \n\n  const [todos, setTodos] = useState([]);\n  const [input , setInput] = useState('');\n\n  useEffect(() => {\n\n    \n    db.collection('todos').orderBy('timestamp' , 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id , todo: doc.data().todo})))\n    })\n  } , [] );\n\n    const addTodo = (event) => {\n      // fires when click the button\n      event.preventDefault();\n\n      db.collection('todos').add({\n        todo: input,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n\n      setTodos([...todos, input])\n      setInput(\"\");\n\n    }\n    \n\n  return (\n    <div className=\"App\">\n\n             <h1>Hey, Welcome to your Todo</h1>\n      \n     <form>\n     <FormControl>\n        <InputLabel style={{color:'black' , fontWeight:'100%'}}>Write Your TODO</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)} />\n     </FormControl>\n     <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n     Add To List\n     </Button>\n     </form>\n      \n      <ul>\n        {todos.map(todo => (\n         <Todo todo={todo}/>\n        ))}\n      </ul>\n      <footer>Â© Copyright TechShah, Made By Parth Patel</footer>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}